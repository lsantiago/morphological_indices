# -*- coding: utf-8 -*-
"""
Plugin de An√°lisis de Gradiente Longitudinal de R√≠os (SL-K) - Versi√≥n Corregida 3.0
Implementa metodolog√≠a cient√≠fica de Hack (1973) y estudios posteriores
Universidad T√©cnica Particular de Loja - UTPL

Correcciones principales:
1. Ordenamiento espacial siguiendo flujo natural del r√≠o
2. C√°lculo de distancia 3D real
3. Aplicaci√≥n correcta de la f√≥rmula SL = (ŒîH/ŒîL) √ó L
4. Filtrado de valores an√≥malos
5. Validaci√≥n de continuidad espacial
"""

from qgis.PyQt.QtCore import QCoreApplication, QUrl
from qgis.PyQt.QtGui import QDesktopServices
from qgis.core import (QgsProcessing, QgsProcessingAlgorithm,
                       QgsProcessingParameterVectorLayer,
                       QgsProcessingParameterBoolean,
                       QgsProcessingParameterFeatureSink,
                       QgsProcessingException,
                       QgsProject, QgsVectorLayer, QgsFields, QgsField,
                       QgsFeature, QgsVectorFileWriter, QgsCoordinateReferenceSystem,
                       QgsWkbTypes, QgsFeatureRequest, QgsExpression,
                       QgsGeometry, QgsPointXY, QgsSymbol, QgsRendererCategory,
                       QgsCategorizedSymbolRenderer, QgsSimpleMarkerSymbolLayer,
                       QgsLayoutManager, QgsLayout, QgsLayoutItemMap,
                       QgsLayoutItemLabel, QgsLayoutSize, QgsLayoutPoint,
                       QgsLayoutItemPicture, QgsUnitTypes, QgsProcessingContext)
from qgis.PyQt.QtCore import QVariant
from qgis.PyQt.QtGui import QColor
import processing
import os
import math
import numpy as np
import matplotlib.pyplot as plt
import matplotlib
matplotlib.use('Qt5Agg')
import tempfile
from datetime import datetime
import webbrowser
from collections import defaultdict

class GradienteAlgorithm(QgsProcessingAlgorithm):
    """
    Algoritmo corregido para c√°lculo del √≠ndice de gradiente longitudinal SL-K
    Basado en metodolog√≠a cient√≠fica de Hack (1973) y mejores pr√°cticas actuales
    """
    
    INPUT_PUNTOS = 'INPUT_PUNTOS'
    GENERAR_HTML = 'GENERAR_HTML'
    FILTRAR_ANOMALIAS = 'FILTRAR_ANOMALIAS'
    OUTPUT_SHAPEFILE = 'OUTPUT_SHAPEFILE'
    
    def initAlgorithm(self, config=None):
        """Inicializa los par√°metros del algoritmo"""
        
        # Capa de entrada - puntos del r√≠o ordenados
        self.addParameter(
            QgsProcessingParameterVectorLayer(
                self.INPUT_PUNTOS,
                self.tr('Puntos del r√≠o (con campos X, Y, Z)'),
                [QgsProcessing.TypeVectorPoint],
                defaultValue=None
            )
        )
        
        # Par√°metro para filtrar anomal√≠as
        self.addParameter(
            QgsProcessingParameterBoolean(
                self.FILTRAR_ANOMALIAS,
                self.tr('Filtrar valores an√≥malos (recomendado)'),
                defaultValue=True
            )
        )
        
        # Par√°metro para generar reporte HTML
        self.addParameter(
            QgsProcessingParameterBoolean(
                self.GENERAR_HTML,
                self.tr('Generar reporte HTML cient√≠fico'),
                defaultValue=True
            )
        )
        
        # Usar FeatureSink para manejo nativo de capas temporales de QGIS
        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.OUTPUT_SHAPEFILE,
                self.tr('Gradiente SL-K'),
                type=QgsProcessing.TypeVectorPoint,
                createByDefault=True
            )
        )
    
    def processAlgorithm(self, parameters, context, feedback):
        """Algoritmo principal con metodolog√≠a corregida"""
        
        # ===== MARCADORES DE VERSI√ìN =====
        feedback.pushInfo("=" * 80)
        feedback.pushInfo("üî¨ AN√ÅLISIS DE GRADIENTE SL-K - METODOLOG√çA HACK (1973)")
        feedback.pushInfo("üìä Universidad T√©cnica Particular de Loja - UTPL")
        feedback.pushInfo("=" * 80)
        
        try:
            # Obtener par√°metros
            puntos_layer = self.parameterAsVectorLayer(parameters, self.INPUT_PUNTOS, context)
            generar_html = self.parameterAsBool(parameters, self.GENERAR_HTML, context)
            filtrar_anomalias = self.parameterAsBool(parameters, self.FILTRAR_ANOMALIAS, context)
            
            feedback.pushInfo("‚úÖ Par√°metros obtenidos correctamente")
            
            # Validar capa
            if not puntos_layer.isValid():
                raise QgsProcessingException(self.tr("Capa de puntos no v√°lida"))
            
            # Validar campos requeridos
            campos_requeridos = self._detectar_campos_coordenadas(puntos_layer)
            if not campos_requeridos:
                raise QgsProcessingException(
                    self.tr("La capa debe contener campos de coordenadas. "
                           "Nombres v√°lidos: X/POINT_X, Y/POINT_Y, Z para las coordenadas")
                )
            
            campo_x, campo_y, campo_z = campos_requeridos
            feedback.pushInfo(f"Usando campos: X={campo_x}, Y={campo_y}, Z={campo_z}")
            
            # PASO 1: Leer y ordenar puntos con metodolog√≠a cient√≠fica
            feedback.pushInfo("üìä Leyendo y ordenando puntos siguiendo flujo del r√≠o...")
            puntos_data = self._leer_puntos_ordenados_espacial(
                puntos_layer, campo_x, campo_y, campo_z, feedback
            )
            
            if len(puntos_data) < 3:
                raise QgsProcessingException(
                    self.tr("Se necesitan al menos 3 puntos para calcular el gradiente SL-K")
                )
            
            feedback.pushInfo(f"üìê Procesando {len(puntos_data)} puntos ordenados espacialmente...")
            
            # PASO 2: Validar continuidad espacial
            self._validar_continuidad_espacial(puntos_data, feedback)
            
            # PASO 3: Calcular distancias 3D acumuladas
            distancias = self._calcular_distancias_3d_acumuladas(puntos_data, feedback)
            
            # PASO 4: Calcular gradientes SL-K con f√≥rmula de Hack (1973)
            gradientes_slk = self._calcular_gradiente_slk_hack(puntos_data, distancias, feedback)
            
            # PASO 5: Filtrar anomal√≠as si se solicita
            if filtrar_anomalias:
                gradientes_slk = self._filtrar_anomalias_estadisticas(gradientes_slk, feedback)
            
            # PASO 6: Calcular m√©tricas adicionales
            puntos_medios = self._calcular_puntos_medios(distancias)
            gradientes_normalizados = self._calcular_gradientes_normalizados(gradientes_slk, feedback)
            
            # PASO 7: Crear campos de salida preservando originales
            fields = QgsFields(puntos_layer.fields())
            fields.append(QgsField("SLK_HACK", QVariant.Double, "double", 20, 8))
            fields.append(QgsField("DIST_3D", QVariant.Double, "double", 20, 2))
            fields.append(QgsField("DIST_CABEC", QVariant.Double, "double", 20, 2))
            fields.append(QgsField("SLK_NORM", QVariant.Double, "double", 20, 8))
            fields.append(QgsField("ORDEN_RIO", QVariant.Int, "integer", 10, 0))
            fields.append(QgsField("PENDIENTE", QVariant.Double, "double", 20, 6))
            fields.append(QgsField("VALIDADO", QVariant.String, "string", 10, 0))
            
            # PASO 8: Crear sink con nombre personalizado
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            layer_name = f"gradiente_slk_{timestamp}"
            
            (sink, dest_id) = self.parameterAsSink(
                parameters, self.OUTPUT_SHAPEFILE, context, fields,
                QgsWkbTypes.Point, puntos_layer.crs()
            )
            
            feedback.pushInfo(f"üîß Creando capa: {layer_name}")
            
            # PASO 9: Escribir features al sink
            features_exitosas = self._escribir_features_al_sink(
                sink, puntos_data, distancias, gradientes_slk, 
                puntos_medios, gradientes_normalizados, puntos_layer, fields, feedback
            )
            
            # PASO 10: Calcular estad√≠sticas cient√≠ficas
            estadisticas = self._calcular_estadisticas_cientificas(
                gradientes_slk, distancias, puntos_data, feedback
            )
            
            # PASO 11: Generar reporte HTML cient√≠fico si se solicita
            if generar_html:
                feedback.pushInfo("üìÑ Generando reporte cient√≠fico HTML...")
                self._generar_reporte_cientifico_html(
                    puntos_data, distancias, gradientes_slk, estadisticas, feedback
                )
            
            # PASO 12: Mostrar estad√≠sticas en log
            self._mostrar_estadisticas(estadisticas, feedback)
            
            feedback.pushInfo("=" * 80)
            feedback.pushInfo("üéâ PROCESAMIENTO COMPLETADO EXITOSAMENTE")
            feedback.pushInfo(f"üìä Puntos procesados: {len(puntos_data)}")
            feedback.pushInfo(f"üìÅ Capa creada: {layer_name}")
            feedback.pushInfo("üìö Metodolog√≠a: Hack (1973)")
            feedback.pushInfo("=" * 80)
            
            return {self.OUTPUT_SHAPEFILE: dest_id}
            
        except Exception as e:
            feedback.reportError(f"‚ùå Error durante el procesamiento: {str(e)}")
            import traceback
            feedback.pushInfo(f"üîß DEBUG: Traceback: {traceback.format_exc()}")
            return {}
    
    def _detectar_campos_coordenadas(self, layer):
        """Detecta autom√°ticamente los campos de coordenadas (sin cambios)"""
        campos = [field.name() for field in layer.fields()]
        
        nombres_x = ["POINT_X", "X", "x", "Point_X", "coord_x"]
        nombres_y = ["POINT_Y", "Y", "y", "Point_Y", "coord_y"]  
        nombres_z = ["Z", "z", "elevation", "altura", "elev", "ELEVATION"]
        
        campo_x = next((campo for campo in nombres_x if campo in campos), None)
        campo_y = next((campo for campo in nombres_y if campo in campos), None)
        campo_z = next((campo for campo in nombres_z if campo in campos), None)
        
        if campo_x and campo_y and campo_z:
            return campo_x, campo_y, campo_z
        return None
    
    def _leer_puntos_ordenados_espacial(self, layer, campo_x, campo_y, campo_z, feedback):
        """
        Lee los puntos y los ordena siguiendo el flujo natural del r√≠o
        CORREGIDO: Implementa ordenamiento espacial en lugar de por elevaci√≥n
        Basado en metodolog√≠a de Hack (1973)
        """
        puntos = []
        
        feedback.pushInfo("üìä Leyendo puntos con metodolog√≠a espacial...")
        
        for feature in layer.getFeatures():
            try:
                x_val = feature[campo_x]
                y_val = feature[campo_y]
                z_val = feature[campo_z]
                
                if x_val is None or y_val is None or z_val is None:
                    feedback.pushWarning(f"Feature {feature.id()} tiene valores nulos, saltando...")
                    continue
                
                x = float(x_val)
                y = float(y_val)
                z = float(z_val)
                
                if not all(math.isfinite(val) for val in [x, y, z]):
                    feedback.pushWarning(f"Feature {feature.id()} tiene valores inv√°lidos, saltando...")
                    continue
                
                puntos.append({
                    'x': x, 
                    'y': y, 
                    'z': z, 
                    'feature': feature,
                    'id': feature.id()
                })
                
            except (ValueError, TypeError) as e:
                feedback.reportError(f"Error leyendo coordenadas en feature {feature.id()}: {e}")
                continue
        
        if len(puntos) < 3:
            raise QgsProcessingException("No se encontraron suficientes puntos v√°lidos")
        
        feedback.pushInfo(f"üìç {len(puntos)} puntos le√≠dos correctamente")
        
        # CORRECCI√ìN PRINCIPAL: Ordenamiento espacial siguiendo flujo del r√≠o
        puntos_ordenados = self._ordenar_puntos_por_flujo_natural(puntos, feedback)
        
        # Validar rango de elevaciones
        elevaciones = [p['z'] for p in puntos_ordenados]
        feedback.pushInfo(f"üìè Rango de elevaciones: {min(elevaciones):.2f} - {max(elevaciones):.2f} m")
        
        return puntos_ordenados

    def _ordenar_puntos_por_flujo_natural(self, puntos, feedback):
        """
        Ordena los puntos siguiendo el flujo natural del r√≠o
        Implementa algoritmo de ordenamiento espacial
        """
        feedback.pushInfo("üîÑ Aplicando ordenamiento espacial por flujo del r√≠o...")
        
        # Estrategia 1: Detectar si hay campo de orden
        if puntos and 'orden' in puntos[0]['feature'].fields().names():
            feedback.pushInfo("üìã Usando campo 'orden' existente")
            return sorted(puntos, key=lambda p: p['feature']['orden'])
        
        # Estrategia 2: Identificar cabecera (punto m√°s alto)
        punto_cabecera = max(puntos, key=lambda p: p['z'])
        feedback.pushInfo(f"üèîÔ∏è Cabecera identificada en elevaci√≥n {punto_cabecera['z']:.2f} m")
        
        # Estrategia 3: Algoritmo de vecino m√°s cercano desde cabecera
        puntos_ordenados = []
        puntos_restantes = puntos.copy()
        
        # Comenzar desde la cabecera
        punto_actual = punto_cabecera
        puntos_ordenados.append(punto_actual)
        puntos_restantes.remove(punto_actual)
        
        # Ordenar por vecino m√°s cercano siguiendo descenso topogr√°fico
        while puntos_restantes:
            # Calcular distancias a puntos restantes
            distancias = []
            for punto in puntos_restantes:
                dist_horizontal = math.sqrt(
                    (punto['x'] - punto_actual['x'])**2 + 
                    (punto['y'] - punto_actual['y'])**2
                )
                
                # Penalizar ascensos (flujo debe descender)
                diferencia_elevacion = punto['z'] - punto_actual['z']
                if diferencia_elevacion > 0:
                    # Penalizar ascensos con factor 3
                    dist_corregida = dist_horizontal * 3.0
                else:
                    # Favorecer descensos
                    dist_corregida = dist_horizontal
                
                distancias.append((dist_corregida, punto))
            
            # Seleccionar el punto m√°s cercano (considerando descenso)
            distancias.sort(key=lambda x: x[0])
            punto_siguiente = distancias[0][1]
            
            puntos_ordenados.append(punto_siguiente)
            puntos_restantes.remove(punto_siguiente)
            punto_actual = punto_siguiente
        
        feedback.pushInfo(f"‚úÖ Puntos ordenados espacialmente: {len(puntos_ordenados)}")
        
        # Validar ordenamiento
        self._validar_ordenamiento_espacial(puntos_ordenados, feedback)
        
        return puntos_ordenados

    def _validar_ordenamiento_espacial(self, puntos_ordenados, feedback):
        """
        Valida que el ordenamiento espacial sea coherente
        Validaci√≥n de continuidad espacial
        """
        feedback.pushInfo("üîç Validando ordenamiento espacial...")
        
        saltos_grandes = 0
        ascensos_grandes = 0
        
        for i in range(len(puntos_ordenados) - 1):
            p1 = puntos_ordenados[i]
            p2 = puntos_ordenados[i + 1]
            
            # Calcular distancia horizontal
            dist_horizontal = math.sqrt(
                (p2['x'] - p1['x'])**2 + 
                (p2['y'] - p1['y'])**2
            )
            
            # Detectar saltos espaciales grandes (>2km)
            if dist_horizontal > 2000:
                saltos_grandes += 1
            
            # Detectar ascensos grandes (>50m)
            diferencia_elevacion = p2['z'] - p1['z']
            if diferencia_elevacion > 50:
                ascensos_grandes += 1
        
        if saltos_grandes > 0:
            feedback.pushWarning(f"‚ö†Ô∏è Detectados {saltos_grandes} saltos espaciales grandes")
        
        if ascensos_grandes > len(puntos_ordenados) * 0.3:
            feedback.pushWarning(f"‚ö†Ô∏è Detectados {ascensos_grandes} ascensos significativos")
        else:
            feedback.pushInfo(f"‚úÖ Ordenamiento espacial validado correctamente")

    def _validar_continuidad_espacial(self, puntos_data, feedback):
        """
        Valida la continuidad espacial de los puntos del r√≠o
        NUEVA FUNCI√ìN: Implementa validaci√≥n de continuidad seg√∫n mejores pr√°cticas
        """
        feedback.pushInfo("üîç V3.0: Validando continuidad espacial del perfil...")
        
        discontinuidades = []
        threshold_distancia = 1000  # metros
        
        for i in range(len(puntos_data) - 1):
            p1 = puntos_data[i]
            p2 = puntos_data[i + 1]
            
            # Calcular distancia 3D entre puntos consecutivos
            dist_3d = self._calcular_distancia_3d_entre_puntos(p1, p2)
            
            if dist_3d > threshold_distancia:
                discontinuidades.append({
                    'indice': i,
                    'distancia': dist_3d,
                    'punto1': p1['id'],
                    'punto2': p2['id']
                })
        
        if discontinuidades:
            feedback.pushWarning(f"‚ö†Ô∏è V3.0: Detectadas {len(discontinuidades)} discontinuidades espaciales")
            for disc in discontinuidades[:3]:  # Mostrar solo las primeras 3
                feedback.pushWarning(
                    f"   Discontinuidad: {disc['distancia']:.0f}m entre puntos {disc['punto1']}-{disc['punto2']}"
                )
        else:
            feedback.pushInfo("‚úÖ V3.0: Continuidad espacial validada correctamente")

    def _calcular_distancia_3d_entre_puntos(self, p1, p2):
        """
        Calcula la distancia 3D real entre dos puntos
        NUEVA FUNCI√ìN: Implementa c√°lculo de distancia 3D real
        """
        dx = p2['x'] - p1['x']
        dy = p2['y'] - p1['y'] 
        dz = p2['z'] - p1['z']
        
        return math.sqrt(dx**2 + dy**2 + dz**2)

    def _calcular_distancias_3d_acumuladas(self, puntos_data, feedback):
        """
        Calcula las distancias 3D acumuladas siguiendo el perfil real del r√≠o
        CORREGIDO: Implementa distancia 3D en lugar de solo horizontal
        Basado en metodolog√≠a de Hack (1973)
        """
        feedback.pushInfo("üìè V3.0: Calculando distancias 3D acumuladas...")
        
        distancias = [0.0]
        distancia_total_horizontal = 0.0
        distancia_total_3d = 0.0
        
        for i in range(1, len(puntos_data)):
            p1 = puntos_data[i-1]
            p2 = puntos_data[i]
            
            # Calcular distancia 3D real
            dist_3d = self._calcular_distancia_3d_entre_puntos(p1, p2)
            
            # Calcular tambi√©n distancia horizontal para comparaci√≥n
            dx = p2['x'] - p1['x']
            dy = p2['y'] - p1['y']
            dist_horizontal = math.sqrt(dx**2 + dy**2)
            
            # Validar distancia m√≠nima
            if dist_3d < 1e-6:
                feedback.pushWarning(f"‚ö†Ô∏è V3.0: Puntos muy cercanos entre √≠ndices {i-1} y {i}")
                dist_3d = 1e-6
            
            # Acumular distancias
            distancia_acumulada_3d = distancias[-1] + dist_3d
            distancias.append(distancia_acumulada_3d)
            
            distancia_total_horizontal += dist_horizontal
            distancia_total_3d += dist_3d
        
        # Estad√≠sticas de distancias
        feedback.pushInfo(f"üìê V3.0: Distancia total horizontal: {distancia_total_horizontal:.2f} m")
        feedback.pushInfo(f"üìê V3.0: Distancia total 3D: {distancia_total_3d:.2f} m")
        diferencia_porcentual = ((distancia_total_3d - distancia_total_horizontal) / distancia_total_horizontal) * 100
        feedback.pushInfo(f"üìä V3.0: Diferencia 3D vs horizontal: {diferencia_porcentual:.1f}%")
        
        return distancias

    def _calcular_puntos_medios(self, distancias):
        """
        Calcula los puntos medios entre distancias consecutivas
        MANTIENE funcionalidad original validada
        """
        puntos_medios = [0.0]
        
        for i in range(1, len(distancias)):
            dist1 = distancias[i-1]
            dist2 = distancias[i]
            punto_medio = dist1 + (dist2 - dist1) / 2
            puntos_medios.append(punto_medio)
        
        return puntos_medios

    def _calcular_gradiente_slk_hack(self, puntos_data, distancias, feedback):
        """
        Calcula el gradiente SL-K usando la f√≥rmula original de Hack (1973)
        CORREGIDO: Implementa SL = (ŒîH/ŒîL) √ó L donde L es distancia desde cabecera
        
        F√≥rmula de Hack (1973): SL = (pendiente del canal) √ó (longitud desde cabecera)
        """
        feedback.pushInfo("üìê V3.0: Calculando gradiente SL-K con f√≥rmula de Hack (1973)...")
        
        gradientes = []
        
        for i in range(len(puntos_data) - 1):
            # Puntos consecutivos
            p1 = puntos_data[i]     # Punto aguas arriba
            p2 = puntos_data[i + 1] # Punto aguas abajo
            
            # Diferencia de elevaci√≥n (ŒîH)
            delta_h = p1['z'] - p2['z']  # Descenso positivo (cabecera hacia desembocadura)
            
            # Longitud del segmento (ŒîL)
            delta_l = distancias[i + 1] - distancias[i]
            
            # Distancia desde cabecera hasta punto medio del segmento (L)
            L = (distancias[i] + distancias[i + 1]) / 2
            
            # Validar datos del segmento
            if abs(delta_l) < 1e-6:
                feedback.pushWarning(f"V3.0: Segmento muy corto entre puntos {i} y {i+1}")
                gradientes.append(0.0)
                continue
            
            if L < 1e-6:
                feedback.pushWarning(f"V3.0: Distancia desde cabecera muy peque√±a en punto {i}")
                gradientes.append(0.0)
                continue
            
            # Aplicar f√≥rmula de Hack (1973): SL = (ŒîH/ŒîL) √ó L
            pendiente_segmento = delta_h / delta_l
            slk_valor = pendiente_segmento * L
            
            # Validar resultado
            if not math.isfinite(slk_valor):
                feedback.pushWarning(f"V3.0: Valor SL-K inv√°lido en segmento {i}, usando 0.0")
                slk_valor = 0.0
            
            gradientes.append(slk_valor)
        
        # Agregar valor final (mismo que pen√∫ltimo para mantener longitud)
        if gradientes:
            gradientes.append(gradientes[-1])
        else:
            gradientes.append(0.0)
        
        # Estad√≠sticas b√°sicas
        valores_validos = [g for g in gradientes if math.isfinite(g) and abs(g) > 1e-10]
        if valores_validos:
            feedback.pushInfo(f"üìä V3.0: SL-K calculado - Min: {min(valores_validos):.6f}, Max: {max(valores_validos):.6f}")
            feedback.pushInfo(f"üìä V3.0: Valores v√°lidos: {len(valores_validos)}/{len(gradientes)}")
        
        return gradientes

    def _filtrar_anomalias_estadisticas(self, gradientes_slk, feedback):
        """
        Filtra anomal√≠as estad√≠sticas en los valores SL-K
        NUEVA FUNCI√ìN: Implementa filtrado estad√≠stico robusto
        """
        feedback.pushInfo("üîç V3.0: Aplicando filtrado estad√≠stico de anomal√≠as...")
        
        # Obtener valores v√°lidos para an√°lisis estad√≠stico
        valores_originales = [g for g in gradientes_slk if math.isfinite(g) and abs(g) > 1e-10]
        
        if len(valores_originales) < 5:
            feedback.pushWarning("V3.0: Insuficientes valores v√°lidos para filtrado estad√≠stico")
            return gradientes_slk
        
        # Calcular estad√≠sticas robustas
        valores_np = np.array(valores_originales)
        
        # Usar percentiles para estad√≠sticas robustas
        q25 = np.percentile(valores_np, 25)
        q75 = np.percentile(valores_np, 75)
        iqr = q75 - q25
        mediana = np.median(valores_np)
        
        # Definir l√≠mites usando m√©todo IQR (m√°s robusto que desviaci√≥n est√°ndar)
        limite_inferior = q25 - 1.5 * iqr
        limite_superior = q75 + 1.5 * iqr
        
        # Aplicar l√≠mites m√°s conservadores para valores extremos
        # Usar 3 * IQR para anomal√≠as muy extremas
        limite_extremo_inf = q25 - 3.0 * iqr
        limite_extremo_sup = q75 + 3.0 * iqr
        
        feedback.pushInfo(f"üìä V3.0: L√≠mites estad√≠sticos - IQR: [{limite_inferior:.6f}, {limite_superior:.6f}]")
        feedback.pushInfo(f"üìä V3.0: L√≠mites extremos - 3√óIQR: [{limite_extremo_inf:.6f}, {limite_extremo_sup:.6f}]")
        
        # Filtrar gradientes
        gradientes_filtrados = []
        anomalias_detectadas = 0
        anomalias_extremas = 0
        
        for i, valor in enumerate(gradientes_slk):
            if not math.isfinite(valor) or abs(valor) <= 1e-10:
                # Mantener valores nulos/cero como est√°n
                gradientes_filtrados.append(valor)
            elif valor < limite_extremo_inf or valor > limite_extremo_sup:
                # Anomal√≠as extremas: reemplazar con mediana
                gradientes_filtrados.append(mediana)
                anomalias_extremas += 1
            elif valor < limite_inferior or valor > limite_superior:
                # Anomal√≠as moderadas: suavizar hacia percentiles
                if valor < limite_inferior:
                    valor_suavizado = q25
                else:
                    valor_suavizado = q75
                gradientes_filtrados.append(valor_suavizado)
                anomalias_detectadas += 1
            else:
                # Valor dentro de rango normal
                gradientes_filtrados.append(valor)
        
        if anomalias_detectadas > 0 or anomalias_extremas > 0:
            feedback.pushInfo(f"üîß V3.0: Anomal√≠as corregidas - Moderadas: {anomalias_detectadas}, Extremas: {anomalias_extremas}")
        else:
            feedback.pushInfo("‚úÖ V3.0: No se detectaron anomal√≠as estad√≠sticas")
        
        return gradientes_filtrados

    def _calcular_gradientes_normalizados(self, gradientes_slk, feedback):
        """
        Calcula los gradientes normalizados respecto a la mediana (m√°s robusto que la media)
        CORREGIDO: Usa mediana en lugar de media para mayor robustez estad√≠stica
        """
        feedback.pushInfo("üìä V3.0: Calculando gradientes normalizados...")
        
        valores_validos = [g for g in gradientes_slk if math.isfinite(g) and abs(g) > 1e-10]
        
        if not valores_validos:
            feedback.pushWarning("V3.0: No hay gradientes v√°lidos para normalizar, usando valores 0")
            return [0.0] * len(gradientes_slk)
        
        # Usar mediana en lugar de media (m√°s robusta a outliers)
        mediana = np.median(valores_validos)
        feedback.pushInfo(f"üìä V3.0: Mediana de gradientes SL-K: {mediana:.6f}")
        
        gradientes_norm = []
        for g in gradientes_slk:
            if abs(mediana) > 1e-10 and math.isfinite(g):
                normalizado = g / mediana
                if math.isfinite(normalizado):
                    gradientes_norm.append(normalizado)
                else:
                    gradientes_norm.append(0.0)
            else:
                gradientes_norm.append(0.0)
        
        return gradientes_norm

    def _escribir_features_al_sink(self, sink, puntos_data, distancias, gradientes_slk, 
                                           puntos_medios, gradientes_norm, input_layer, fields, feedback):
        """
        Escribe las features al sink con campos validados
        """
        feedback.pushInfo("‚úçÔ∏è Escribiendo datos al sink...")
        
        features_exitosas = 0
        for i, punto in enumerate(puntos_data):
            try:
                new_feature = QgsFeature(fields)
                
                # Copiar TODOS los atributos originales
                for field in input_layer.fields():
                    field_name = field.name()
                    valor_original = punto['feature'][field_name]
                    new_feature[field_name] = valor_original
                
                # Calcular y validar nuevos valores con metodolog√≠a Hack (1973)
                slk_val = float(gradientes_slk[i]) if i < len(gradientes_slk) and math.isfinite(gradientes_slk[i]) else 0.0
                dist_3d_val = float(distancias[i]) if i < len(distancias) and math.isfinite(distancias[i]) else 0.0
                dist_cabec_val = float(puntos_medios[i]) if i < len(puntos_medios) and math.isfinite(puntos_medios[i]) else 0.0
                slk_norm_val = float(gradientes_norm[i]) if i < len(gradientes_norm) and math.isfinite(gradientes_norm[i]) else 0.0
                
                # Calcular pendiente en porcentaje
                if i < len(puntos_data) - 1:
                    p1 = puntos_data[i]
                    p2 = puntos_data[i + 1]
                    delta_h = p1['z'] - p2['z']
                    delta_l = distancias[i + 1] - distancias[i] if i + 1 < len(distancias) else 1.0
                    pendiente_pct = abs(delta_h / delta_l) * 100 if abs(delta_l) > 1e-6 else 0.0
                else:
                    pendiente_pct = 0.0
                
                # Determinar estado de validaci√≥n
                if abs(slk_val) < 1e-10:
                    estado_validacion = "NULO"
                elif abs(slk_val) > 1000:
                    estado_validacion = "ANOMALO"
                else:
                    estado_validacion = "VALIDO"
                
                orden_rio = i + 1
                
                # Asignar valores a campos
                new_feature["SLK_HACK"] = slk_val
                new_feature["DIST_3D"] = dist_3d_val
                new_feature["DIST_CABEC"] = dist_cabec_val
                new_feature["SLK_NORM"] = slk_norm_val
                new_feature["PENDIENTE"] = pendiente_pct
                new_feature["ORDEN_RIO"] = orden_rio
                new_feature["VALIDADO"] = estado_validacion
                
                # Copiar geometr√≠a
                new_feature.setGeometry(punto['feature'].geometry())
                
                # Escribir feature al sink
                if sink.addFeature(new_feature):
                    features_exitosas += 1
                else:
                    feedback.pushWarning(f"No se pudo escribir feature {i}")
                    
            except Exception as e:
                feedback.pushWarning(f"Error en feature {i}: {str(e)}")
                continue
        
        feedback.pushInfo(f"‚úÖ Features escritas exitosamente: {features_exitosas}/{len(puntos_data)}")
        
        return features_exitosas

    def _calcular_estadisticas_cientificas(self, gradientes_slk, distancias, puntos_data, feedback):
        """
        Calcula estad√≠sticas cient√≠ficas completas para el reporte
        CORREGIDO: Incluye m√©tricas estad√≠sticas robustas y validaci√≥n cient√≠fica
        """
        feedback.pushInfo("üìä V3.0: Calculando estad√≠sticas cient√≠ficas...")
        
        valores_validos = [g for g in gradientes_slk if math.isfinite(g) and abs(g) > 1e-10]
        elevaciones = [p['z'] for p in puntos_data]
        
        if not valores_validos:
            return {"error": "No hay gradientes v√°lidos para an√°lisis estad√≠stico"}
        
        # Estad√≠sticas b√°sicas
        valores_np = np.array(valores_validos)
        
        estadisticas = {
            # Informaci√≥n general
            "n_puntos": len(puntos_data),
            "n_segmentos": len(puntos_data) - 1,
            "distancia_total_3d": distancias[-1] if distancias else 0,
            
            # Informaci√≥n altim√©trica
            "elevacion_max": max(elevaciones),
            "elevacion_min": min(elevaciones),
            "desnivel_total": max(elevaciones) - min(elevaciones),
            
            # Estad√≠sticas SL-K robustas
            "slk_mediana": float(np.median(valores_np)),
            "slk_media": float(np.mean(valores_np)),
            "slk_q25": float(np.percentile(valores_np, 25)),
            "slk_q75": float(np.percentile(valores_np, 75)),
            "slk_iqr": float(np.percentile(valores_np, 75) - np.percentile(valores_np, 25)),
            "slk_minimo": float(np.min(valores_np)),
            "slk_maximo": float(np.max(valores_np)),
            
            # Estad√≠sticas de dispersi√≥n
            "slk_desviacion_std": float(np.std(valores_np)),
            "slk_coef_variacion": float(np.std(valores_np) / np.mean(valores_np)) if np.mean(valores_np) != 0 else 0,
            
            # M√©tricas de calidad
            "puntos_validos": len(valores_validos),
            "puntos_problematicos": len(gradientes_slk) - len(valores_validos),
            "porcentaje_validez": (len(valores_validos) / len(gradientes_slk)) * 100,
            
            # Informaci√≥n metodol√≥gica
            "metodologia": "Hack (1973) - Corregido V3.0",
            "fecha_analisis": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "distancia_3d": True,
            "filtrado_anomalias": True
        }
        
        # Calcular pendiente promedio
        if estadisticas["distancia_total_3d"] > 0:
            estadisticas["pendiente_promedio_pct"] = (estadisticas["desnivel_total"] / estadisticas["distancia_total_3d"]) * 100
        else:
            estadisticas["pendiente_promedio_pct"] = 0.0
        
        return estadisticas

    def _generar_reporte_cientifico_html(self, puntos_data, distancias, gradientes_slk, estadisticas, feedback):
        """
        Genera reporte HTML cient√≠fico completo con metodolog√≠a validada
        CORREGIDO: Incluye referencias cient√≠ficas y metodolog√≠a Hack (1973)
        """
        try:
            feedback.pushInfo("Generando reporte HTML con metodolog√≠a cient√≠fica...")
            
            # Extraer datos para gr√°ficos cient√≠ficos
            elevaciones = [p['z'] for p in puntos_data]
            
            # Convertir a listas simples para JSON
            distancias_list = [float(d) for d in distancias]
            elevaciones_list = [float(e) for e in elevaciones]
            gradientes_list = [float(g) if math.isfinite(g) else 0.0 for g in gradientes_slk]
            
            # Crear contenido HTML cient√≠fico
            html_content = f"""
            <!DOCTYPE html>
            <html lang="es">
            <head>
                <meta charset="UTF-8">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <title>An√°lisis Cient√≠fico de Gradiente SL-K - Metodolog√≠a Hack (1973)</title>
                <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
                <style>
                    body {{
                        font-family: 'Georgia', 'Times New Roman', serif;
                        line-height: 1.7;
                        margin: 0;
                        padding: 20px;
                        background-color: #fafafa;
                        color: #333;
                    }}
                    .container {{
                        max-width: 1200px;
                        margin: 0 auto;
                        background-color: white;
                        padding: 40px;
                        border-radius: 8px;
                        box-shadow: 0 4px 20px rgba(0,0,0,0.08);
                    }}
                    .header {{
                        text-align: center;
                        border-bottom: 3px solid #2E86AB;
                        padding-bottom: 25px;
                        margin-bottom: 40px;
                    }}
                    .header h1 {{
                        color: #2E86AB;
                        margin: 0;
                        font-size: 2.2em;
                        font-weight: 600;
                    }}
                    .methodology-badge {{
                        background: linear-gradient(135deg, #2E86AB, #A23B72);
                        color: white;
                        padding: 8px 20px;
                        border-radius: 25px;
                        font-size: 0.95em;
                        display: inline-block;
                        margin-top: 15px;
                        font-weight: 500;
                    }}
                    .section {{
                        margin: 35px 0;
                        padding: 25px;
                        background: linear-gradient(135deg, #f8f9fa, #ffffff);
                        border-radius: 10px;
                        border-left: 5px solid #2E86AB;
                        box-shadow: 0 2px 8px rgba(0,0,0,0.04);
                    }}
                    .section h2 {{
                        color: #2E86AB;
                        margin-top: 0;
                        font-size: 1.4em;
                        font-weight: 600;
                    }}
                    .stats-grid {{
                        display: grid;
                        grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
                        gap: 20px;
                        margin: 25px 0;
                    }}
                    .stat-card {{
                        background: white;
                        padding: 20px;
                        border-radius: 10px;
                        border-left: 4px solid #A23B72;
                        box-shadow: 0 3px 12px rgba(0,0,0,0.08);
                        transition: transform 0.2s ease;
                    }}
                    .stat-card:hover {{
                        transform: translateY(-2px);
                    }}
                    .stat-value {{
                        font-size: 1.8em;
                        font-weight: bold;
                        color: #2E86AB;
                        margin: 0;
                        font-family: 'Monaco', monospace;
                    }}
                    .stat-label {{
                        color: #555;
                        margin: 8px 0 0 0;
                        font-size: 0.9em;
                        font-weight: 500;
                    }}
                    .stat-sublabel {{
                        color: #888;
                        font-size: 0.8em;
                        margin-top: 4px;
                    }}
                    .formula {{
                        background: #f8f9fa;
                        padding: 15px;
                        border-radius: 6px;
                        font-family: 'Monaco', monospace;
                        text-align: center;
                        font-size: 1.1em;
                        margin: 15px 0;
                        border: 1px solid #dee2e6;
                    }}
                    .reference {{
                        background: #fff3cd;
                        padding: 20px;
                        border-radius: 8px;
                        border-left: 4px solid #ffc107;
                        margin: 20px 0;
                        font-style: italic;
                    }}
                    .quality-indicator {{
                        display: inline-block;
                        padding: 4px 12px;
                        border-radius: 15px;
                        font-size: 0.8em;
                        font-weight: 600;
                        margin-left: 10px;
                    }}
                    .quality-excelente {{ background: #d4edda; color: #155724; }}
                    .quality-buena {{ background: #fff3cd; color: #856404; }}
                    .quality-regular {{ background: #f8d7da; color: #721c24; }}
                </style>
            </head>
            <body>
                <div class="container">
                    <div class="header">
                        <h1>An√°lisis Geomorfol√≥gico del √çndice de Gradiente Longitudinal</h1>
                        <div class="methodology-badge">Metodolog√≠a Hack (1973)</div>
                        <p style="margin-top: 15px; font-size: 1.1em;">Universidad T√©cnica Particular de Loja - UTPL</p>
                        <p>Fecha de an√°lisis: {estadisticas.get('fecha_analisis', 'N/A')}</p>
                    </div>
                    
                    <div class="section">
                        <h2>Metodolog√≠a Cient√≠fica Aplicada</h2>
                        <p><strong>√çndice de Gradiente Longitudinal (SL)</strong> seg√∫n Hack (1973): Herramienta geomorfom√©trica para detectar anomal√≠as tect√≥nicas, cambios litol√≥gicos y procesos erosivos activos en perfiles longitudinales de r√≠os.</p>
                        
                        <div class="formula">
                            SL = (ŒîH/ŒîL) √ó L
                        </div>
                        
                        <p><strong>Donde:</strong></p>
                        <ul>
                            <li><strong>ŒîH:</strong> Diferencia de elevaci√≥n entre puntos consecutivos</li>
                            <li><strong>ŒîL:</strong> Distancia 3D real del segmento</li>
                            <li><strong>L:</strong> Distancia desde la cabecera hasta el punto medio del segmento</li>
                        </ul>
                        
                        <div class="reference">
                            <strong>Referencia cient√≠fica:</strong> Hack, J.T. (1973). Stream-profile analysis and stream-gradient index. Journal of Research of the U.S. Geological Survey, 1(4), 421-429.
                        </div>
                    </div>
                    
                    <div class="section">
                        <h2>Estad√≠sticas del An√°lisis {self._obtener_indicador_calidad(estadisticas)}</h2>
                        <div class="stats-grid">
                            <div class="stat-card">
                                <p class="stat-value">{estadisticas.get('n_puntos', 0)}</p>
                                <p class="stat-label">Puntos Analizados</p>
                                <p class="stat-sublabel">{estadisticas.get('n_segmentos', 0)} segmentos de r√≠o</p>
                            </div>
                            <div class="stat-card">
                                <p class="stat-value">{estadisticas.get('distancia_total_3d', 0):.1f} m</p>
                                <p class="stat-label">Distancia Total 3D</p>
                                <p class="stat-sublabel">Siguiendo perfil real del cauce</p>
                            </div>
                            <div class="stat-card">
                                <p class="stat-value">{estadisticas.get('slk_mediana', 0):.6f}</p>
                                <p class="stat-label">SL-K Mediana</p>
                                <p class="stat-sublabel">Valor central robusto</p>
                            </div>
                            <div class="stat-card">
                                <p class="stat-value">{estadisticas.get('porcentaje_validez', 0):.1f}%</p>
                                <p class="stat-label">Validez de Datos</p>
                                <p class="stat-sublabel">Control de calidad</p>
                            </div>
                        </div>
                    </div>
                    
                    <div class="section">
                        <h2>Gr√°fico Cient√≠fico Interactivo</h2>
                        <div id="grafico-gradiente" style="width:100%;height:600px;"></div>
                        <p style="text-align: center; margin-top: 15px; color: #666; font-style: italic;">
                            Gr√°fico del perfil longitudinal y gradiente SL-K seg√∫n metodolog√≠a de Hack (1973)
                        </p>
                    </div>
                    
                    <div class="section">
                        <h2>Interpretaci√≥n Geomorfol√≥gica</h2>
                        {self._generar_interpretacion_cientifica_html(estadisticas)}
                    </div>
                    
                    <div style="text-align: center; margin-top: 40px; padding-top: 20px; border-top: 2px solid #dee2e6; color: #666; font-size: 0.9em;">
                        <p><strong>Reporte Cient√≠fico V3.0 - Plugin de An√°lisis Geomorfol√≥gico</strong></p>
                        <p>Universidad T√©cnica Particular de Loja - Metodolog√≠a Hack (1973) Corregida</p>
                    </div>
                </div>
                
                <script>
                    // Datos del perfil longitudinal
                    var perfil = {{
                        x: {distancias_list},
                        y: {elevaciones_list},
                        name: 'Perfil Longitudinal del R√≠o',
                        type: 'scatter',
                        mode: 'lines+markers',
                        line: {{color: '#2E86AB', width: 3}},
                        marker: {{size: 4, color: '#2E86AB'}},
                        yaxis: 'y1',
                        hovertemplate: 'Distancia: %{{x:.1f}} m<br>Elevaci√≥n: %{{y:.1f}} m<extra></extra>'
                    }};
                    
                    // Datos del gradiente SL-K
                    var gradiente = {{
                        x: {distancias_list},
                        y: {gradientes_list},
                        name: '√çndice SL-K (Hack 1973)',
                        type: 'scatter',
                        mode: 'lines+markers',
                        line: {{color: '#A23B72', width: 2}},
                        marker: {{size: 3, color: '#A23B72'}},
                        yaxis: 'y2',
                        hovertemplate: 'Distancia: %{{x:.1f}} m<br>SL-K: %{{y:.6f}}<extra></extra>'
                    }};
                    
                    var layout = {{
                        title: {{
                            text: 'Perfil Longitudinal y Gradiente SL-K (Hack 1973)<br><sub>Universidad T√©cnica Particular de Loja - UTPL</sub>',
                            font: {{size: 16, color: '#2E86AB'}}
                        }},
                        xaxis: {{
                            title: 'Distancia desde Cabecera (m)',
                            showgrid: true,
                            gridcolor: '#f0f0f0'
                        }},
                        yaxis: {{
                            title: 'Elevaci√≥n (m)',
                            titlefont: {{color: '#2E86AB'}},
                            tickfont: {{color: '#2E86AB'}},
                            side: 'left'
                        }},
                        yaxis2: {{
                            title: '√çndice SL-K',
                            titlefont: {{color: '#A23B72'}},
                            tickfont: {{color: '#A23B72'}},
                            overlaying: 'y',
                            side: 'right'
                        }},
                        hovermode: 'x unified',
                        showlegend: true,
                        legend: {{
                            x: 0.02,
                            y: 0.98,
                            bgcolor: 'rgba(255,255,255,0.9)',
                            bordercolor: '#ccc',
                            borderwidth: 1
                        }},
                        plot_bgcolor: '#fafafa',
                        paper_bgcolor: 'white'
                    }};
                    
                    var config = {{
                        displayModeBar: true,
                        displaylogo: false,
                        toImageButtonOptions: {{
                            format: 'png',
                            filename: 'gradiente_slk_hack_1973',
                            height: 600,
                            width: 1200,
                            scale: 2
                        }}
                    }};
                    
                    Plotly.newPlot('grafico-gradiente', [perfil, gradiente], layout, config);
                </script>
            </body>
            </html>
            """
            
            # Guardar y abrir reporte
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            temp_dir = tempfile.gettempdir()
            ruta_html = os.path.join(temp_dir, f"reporte_slk_hack_1973_v3_{timestamp}.html")
            
            with open(ruta_html, 'w', encoding='utf-8') as f:
                f.write(html_content)
            
            webbrowser.open(f"file://{ruta_html}")
            feedback.pushInfo(f"V3.0: Reporte cient√≠fico generado: {ruta_html}")
                
        except Exception as e:
            feedback.reportError(f"V3.0: Error generando reporte: {str(e)}")

    def _obtener_indicador_calidad(self, estadisticas):
        """Determina el indicador de calidad del an√°lisis"""
        porcentaje_validez = estadisticas.get('porcentaje_validez', 0)
        
        if porcentaje_validez >= 90:
            return '<span class="quality-indicator quality-excelente">EXCELENTE</span>'
        elif porcentaje_validez >= 75:
            return '<span class="quality-indicator quality-buena">BUENA</span>'
        else:
            return '<span class="quality-indicator quality-regular">REVISAR</span>'

    def _generar_interpretacion_cientifica_html(self, estadisticas):
        """Genera interpretaci√≥n cient√≠fica autom√°tica"""
        try:
            pendiente_pct = estadisticas.get('pendiente_promedio_pct', 0)
            coef_variacion = estadisticas.get('slk_coef_variacion', 0)
            
            interpretacion = "<h3>An√°lisis Geomorfol√≥gico:</h3>"
            
            if pendiente_pct < 2:
                interpretacion += "<p><strong>R√©gimen de Baja Energ√≠a:</strong> Pendiente suave, procesos de sedimentaci√≥n dominantes.</p>"
            elif pendiente_pct < 8:
                interpretacion += "<p><strong>R√©gimen Moderado:</strong> Balance entre erosi√≥n y sedimentaci√≥n.</p>"
            else:
                interpretacion += "<p><strong>R√©gimen de Alta Energ√≠a:</strong> Procesos erosivos intensos.</p>"
            
            if coef_variacion < 0.5:
                interpretacion += "<p><strong>Perfil Uniforme:</strong> Equilibrio geomorfol√≥gico relativo.</p>"
            else:
                interpretacion += "<p><strong>Perfil Variable:</strong> Posibles anomal√≠as tect√≥nicas o litol√≥gicas.</p>"
            
            return interpretacion
            
        except Exception:
            return "<p>Consulte las estad√≠sticas para interpretaci√≥n manual.</p>"

    def _mostrar_estadisticas(self, estadisticas, feedback):
        """Muestra estad√≠sticas en el log"""
        if "error" in estadisticas:
            feedback.reportError("Error en estad√≠sticas")
            return
        
        feedback.pushInfo("=" * 60)
        feedback.pushInfo("ESTAD√çSTICAS CIENT√çFICAS - METODOLOG√çA HACK (1973)")
        feedback.pushInfo("=" * 60)
        feedback.pushInfo(f"Metodolog√≠a: {estadisticas['metodologia']}")
        feedback.pushInfo(f"Puntos: {estadisticas['n_puntos']}")
        feedback.pushInfo(f"Distancia 3D: {estadisticas['distancia_total_3d']:.2f} m")
        feedback.pushInfo(f"SL-K Mediana: {estadisticas['slk_mediana']:.6f}")
        feedback.pushInfo(f"Validez: {estadisticas['porcentaje_validez']:.1f}%")
        feedback.pushInfo("=" * 60)

    def name(self):
        return 'gradiente_slk_hack'
        
    def displayName(self):
        return self.tr('Calcular Gradiente SL-K (Hack 1973)')
        
    def group(self):
        return self.tr('√çndices Morfol√≥gicos')
        
    def groupId(self):
        return 'morfologia'
    
    def shortHelpString(self):
        return self.tr('''
        <h3>An√°lisis de Gradiente SL-K - Metodolog√≠a Hack (1973)</h3>
        
        <p>Implementa la metodolog√≠a cient√≠fica original para el c√°lculo del √≠ndice de gradiente longitudinal SL-K.</p>
        
        <h4>Caracter√≠sticas:</h4>
        <ul>
        <li><b>Ordenamiento espacial:</b> Sigue flujo natural del r√≠o</li>
        <li><b>Distancia 3D real:</b> Considera topograf√≠a del perfil</li>
        <li><b>F√≥rmula de Hack (1973):</b> SL = (ŒîH/ŒîL) √ó L</li>
        <li><b>Filtrado estad√≠stico:</b> Elimina anomal√≠as robustamente</li>
        </ul>
        
        <h4>Referencia:</h4>
        <p>Hack, J.T. (1973). Stream-profile analysis and stream-gradient index.</p>
        
        <p><i>Universidad T√©cnica Particular de Loja - UTPL</i></p>
        ''')
        
    def tr(self, string):
        return QCoreApplication.translate('Processing', string)
        
    def createInstance(self):
        return GradienteAlgorithm()